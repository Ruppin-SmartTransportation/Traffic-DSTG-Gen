
# Background and Related Research

This chapter provides both background context and a comprehensive overview of foundational and contemporary research in traffic prediction. It covers key developments in algorithmic routing, graph-based learning, and the evolution of dynamic, intent-aware traffic forecasting systems. The discussion is structured chronologically and thematically, starting with classical routing algorithms to establish historical context, then exploring the emergence of spatio-temporal neural models, innovations in dynamic graph architectures, and finally, the growing integration of user intent and destination-aware forecasting mechanisms. This foundation situates our own research within the broader trajectory of technological advancements in traffic modeling.

## Classical Approaches to Routing and Traffic Modeling

Classical algorithms have laid the groundwork for routing and network optimization, addressing fundamental problems such as shortest paths, maximum flow, and all-pairs connectivity. These approaches continue to influence the structure of modern routing systems, particularly in their efficiency and theoretical guarantees.

**Dijkstra’s algorithm** [@dijkstra1959] computes the shortest path from a source to all nodes in a graph with non-negative edge weights. It operates in O((V + E) log V) time when using a priority queue and an adjacency list. Dijkstra’s method is foundational for real-time navigation and underpins many contemporary routing engines.

**Bellman-Ford algorithm** [@bellman1958routing] handles graphs with negative edge weights and computes shortest paths in O(VE) time. Though slower than Dijkstra’s in most cases, its robustness to edge weights makes it suitable for systems that model time or cost variances. It has been integrated into several transportation applications, including delay-tolerant routing protocols and public transportation scheduling, where variable costs and delays must be modeled explicitly [@zhang2015public; @wang2019dtnt].

**A* search**  [@hart1968formal] improves upon Dijkstra by incorporating heuristics to guide path expansion toward the goal. While it maintains the same worst-case complexity, it often performs faster in practice. This makes it highly suitable for robotics applications, where mobile agents must plan efficient, obstacle-avoiding paths in structured environments. It is also widely applied in map-based systems—platforms that rely on structured representations of physical space, such as road networks or grid maps, for route computation and spatial reasoning.

**Bidirectional search** [@pohl1971bi] accelerates shortest-path queries by performing simultaneous forward and backward searches. In practice, this approach can nearly halve the number of nodes explored, reducing actual computation time by up to 50% in typical scenarios. Empirical evaluations have shown substantial performance gains, particularly in grid-based and structured graphs used in navigation systems [@pohl1971bi; @goldberg2005]. Despite these improvements, its worst-case complexity remains similar to that of Dijkstra’s algorithm.

**Ford-Fulkerson algorithm** solves the maximum flow problem by incrementally augmenting flow along available paths. These paths are computed using depth-first search (DFS) on the residual graph, which represents remaining capacities along edges. Once an augmenting path is found, the algorithm increases the flow along that path and updates the residual graph. This process continues until no more augmenting paths can be found. Its complexity is O(E × max_flow), making it suitable for applications such as identifying bottlenecks in urban road networks [@ford1956maxflow]. Practical applications include optimizing real-time vehicle dispatch in logistics networks, improving load balancing in smart road infrastructures, and adaptive traffic signal control in congested corridors [@SmartIntersection2017; @AuctionJunction2020; @UrbanFlow2022].

**Dinic’s algorithm** improves upon Ford-Fulkerson by introducing the concepts of level graphs and blocking flows. A level graph is constructed using a breadth-first search (BFS) to assign levels to each node based on its distance from the source, ensuring that all edges in the level graph move from one level to the next. This structure guides the search for augmenting paths more efficiently. A blocking flow is a flow where no additional flow can be pushed without increasing the level of some node, allowing Dinic’s algorithm to process multiple augmenting paths in a single phase. This results in improved performance and a time complexity of O(V² × E) in general graphs. These properties make Dinic’s algorithm particularly effective in transportation systems where rapid estimation of throughput or capacity limits is critical. For example, studies have applied Dinic’s algorithm to optimize network flows in intelligent traffic light scheduling [@AuctionJunction2020], traffic control at smart intersections [@SmartIntersection2017], and the management of large-scale urban traffic as dynamic flow networks [@SmartCityGraphs2021].

**Floyd–Warshall algorithm** computes shortest paths between all pairs of nodes in O(V³) time. Though it is less scalable for large networks due to its cubic complexity, its simplicity and comprehensive nature make it a common baseline in academic studies, small-scale simulations, and educational tools. It is particularly effective in settings that require a complete shortest path matrix, such as in centralized traffic management systems or transit planning models, where precomputing all inter-node distances simplifies scheduling and routing decisions [@floyd1962; @fujii1994dynamic; @han2012modeling].

**Johnson’s algorithm** provides an efficient all-pairs solution for sparse graphs, operating in O(V² log V + VE). It handles negative weights and scales well with large, sparse networks [@johnson1977].

**Edmonds–Karp algorithm** [@edmonds1972] is a specific implementation of Ford-Fulkerson that uses BFS to find augmenting paths, providing a bounded runtime of O(VE²). Its predictability and clarity make it useful in teaching and evaluation.

**Push–Relabel algorithm** (also known as Goldberg–Tarjan) [@goldberg1988] offers a practical alternative for dense graphs, with time complexity O(V² √E). It is especially effective in centralized systems where batch updates to traffic flow must be processed efficiently.

Together, these algorithms form the foundation of modern traffic and network modeling. They are computationally elegant, theoretically grounded, and continue to inform more complex systems including hierarchical routing, real-time traffic adjustment, and learning-augmented planning.

## Hierarchical Routing and Highway Dimension

While classical routing algorithms laid the foundation for efficient pathfinding, further research has focused on improving scalability and query performance on large-scale road networks. One notable advancement is the concept of **highway dimension**, introduced by Abraham et al. [@abraham2011], which provides a structural framework for explaining the practical efficiency of shortest-path algorithms in real-world networks.

Highway dimension measures how frequently certain “important” nodes — typically those representing highway entries or key junctions — appear on shortest paths between distant node pairs. Leveraging this property, researchers developed **hierarchical routing algorithms**, including **Contraction Hierarchies** (CH) [@geisberger2008] and **Customizable Route Planning** (CRP) [@delling2011], which drastically improve query times by precomputing shortcut edges and partitioning the graph into hierarchical layers.

Formally, for graphs with highway dimension h, shortest path queries can be answered in O(h · log n) time after a preprocessing step of O(h · n · log n), where n is the number of nodes. In real-world scenarios, such as continental-scale road networks, this results in sub-millisecond query times after several hours of preprocessing with moderate memory usage.



## Emergence of Data-Driven and Temporal Models

While classical algorithms such as Dijkstra’s, Bellman-Ford, and their hierarchical extensions like Contraction Hierarchies offer scalable and theoretically grounded solutions, they are inherently reactive. These methods do not incorporate learning from historical or real-time data, limiting their responsiveness to evolving traffic conditions. Although time-dependent variants have been developed [@abraham2011], empirical evaluations [@nannicini2008; @geisberger2012] show that their accuracy degrades significantly under non-recurrent congestion or disruptions, with ETA errors often exceeding 20% in urban environments.

This lack of adaptability restricts the utility of classical methods in modern, data-rich transportation environments where user behavior and traffic patterns shift rapidly. While computationally robust, they fall short in accounting for dynamic congestion and time-variant interactions—challenges that have driven the evolution toward data-driven and temporally-aware forecasting techniques discussed in this section.

This shift toward learning-based methods was initially driven by the increasing availability of traffic sensor data, which enabled the development of statistical and machine learning techniques tailored to traffic forecasting. Early statistical models such as ARIMA [@box1970time] and Kalman filters [@welch1995introduction], though not machine learning models, were employed to analyze univariate and multivariate time series data, achieving mean absolute percentage error (MAPE) reductions of 5–10% over naive baselines. Notable examples include applications to datasets such as METR-LA [@li2018_metrla] and PEMS [@pemsbay], where these traditional methods served as early baselines. These models offered the first step toward predictive modeling, but their inability to model nonlinear spatial interactions and adapt to changing network conditions spurred further innovation toward more complex deep learning architectures.

## Deep Learning for Sequence and Spatio-Temporal Modeling

With the advent of deep learning, recurrent neural networks (RNNs), and Long Short-Term Memory (LSTM) networks became popular for sequence modeling in traffic flow. Notable examples include SBU-LSTM [@ma2015long], which achieved a 15.7% RMSE improvement over ARIMA on the PEMS dataset, and DeepTransport [@xu2018deeptransport], which incorporated auxiliary features to further boost predictive performance. These models significantly outperformed traditional statistical methods, achieving state-of-the-art RMSE values on benchmark datasets such as METR-LA and PEMS. However, their core limitation lies in their inability to model spatial correlations across road segments, limiting their effectiveness in capturing complex network-wide traffic dynamics.

To address these shortcomings, several non-graph-based spatio-temporal models have emerged. For instance, DeepST and ST-ResNet [@zhang2016dnn; @zhang2017deep] apply convolutional architectures to grid-based city traffic data, modeling both temporal dependencies and spatial locality in structured layouts. Similarly, 3D-TCN [@yuan2018tcn] uses three-dimensional convolutions to learn joint spatial and temporal features, while GMAN [@zheng2020gman] incorporates spatio-temporal attention mechanisms without relying on explicit graph connectivity. These models offer complementary approaches that further highlight the evolving landscape of deep learning for traffic forecasting.

## Graph Neural Networks for Spatio-Temporal Learning

A significant leap in traffic forecasting came with the application of Graph Neural Networks (GNNs) to road networks. GNNs are a class of deep learning models designed to operate on data represented as graphs, where nodes and edges capture complex relational structures. In the context of traffic systems, nodes can represent intersections or sensors, while edges capture road connectivity or traffic flow. Graph Convolutional Networks (GCNs), a type of GNN, enable learning spatial dependencies across topologically connected road segments by aggregating information from neighboring nodes. STGCN [@yu2018], for example, integrates GCNs with temporal convolution to model both spatial and temporal dependencies, achieving a 12% reduction in MAE on METR-LA compared to LSTM baselines.

Diffusion Convolutional Recurrent Neural Networks (DCRNN) [@li2018] introduced a diffusion process to model traffic propagation more realistically. In this context, the diffusion process simulates how traffic conditions spread across a road network, allowing the model to capture both forward and backward spatial dependencies using a bidirectional random walk on the graph. This allows for more nuanced modeling of traffic flow dynamics compared to standard graph convolutions. DCRNN outperformed traditional RNNs by up to 16% on PEMS-BAY in terms of RMSE. T-GCN [@cui2019] combined Graph Convolutional Networks (GCNs) with Gated Recurrent Units (GRUs)—a simplified variant of LSTM designed to capture temporal dependencies more efficiently. GRUs maintain a memory of past observations and update this memory based on new inputs using gating mechanisms [@cho2014gru], which makes them well-suited for sequential data like traffic time series. This architecture has been praised for its simplicity and effectiveness on small-to-medium-sized urban networks.

Despite their advantages, these models generally rely on static sensor networks with fixed topologies, meaning that their node and edge structures do not adapt to real-time conditions. As a result, they are unable to incorporate transient network disruptions such as temporary road closures, construction zones, or changes in vehicle flow. This rigidity limits their responsiveness in dynamic urban environments, where real-time traffic variations and user-driven route changes require flexible graph representations and continual structural adaptation.

## Dynamic Graph Modeling

The limitations of static graph topologies have motivated the development of dynamic graph modeling approaches, where the structure of the graph evolves over time. Dynamic Graph Neural Networks (DGNNs) allow both node and edge properties to be updated at each time step, enabling models to better capture real-time changes in traffic conditions.

A key demonstration of the advantages of dynamic graph modeling comes from extensions of DCRNN. When enhanced with time-varying graph representations, the dynamic variant of DCRNN achieved an RMSE improvement of 16–21% over its static graph baseline [@li2018]. These improvements validate the impact of graph adaptability in spatio-temporal forecasting.

Several additional models further highlight the effectiveness of dynamic graph structures:

- **TrafficPredict** [@trafficpredict] models heterogeneous traffic agents (e.g., vehicles, bicycles, pedestrians) as dynamic nodes in an interaction-aware graph. It demonstrated a 19.8% reduction in RMSE on urban trajectory forecasting tasks by incorporating intention-aware trajectory encoding.

- **TrajGAT** [@trajectoryintentnet] uses a graph attention mechanism to learn interactions between vehicles over time. By encoding vehicle trajectories and modeling spatial-temporal influence through attention, it outperforms baseline intent-unaware models by more than 12%.

- **Hybrid time-varying GNNs** [@hybridgnn] combine temporal convolution and attention mechanisms to allow edge adaptation in real time. These models achieved top-1 performance on multiple benchmark datasets such as PEMS08 and PEMS04 with up to 14.7% lower MAE.

- **ST-SSL** [@stssl] introduces a self-supervised contrastive learning framework applied to dynamic graph snapshots. It demonstrated that pre-training with masked node reconstruction can reduce labeled data requirements by 30–40% while preserving prediction accuracy.

Together, these approaches improve spatial-temporal generalization and adaptability to non-stationary traffic patterns, structural disruptions, and stochastic agent behaviors—characteristics central to real-world intelligent transportation systems.



## Destination-Aware and Intent-Informed Forecasting

While recent advances in spatio-temporal modeling have significantly improved traffic prediction, most existing approaches still treat traffic flow as an emergent property of aggregated historical data. A critical limitation is the lack of integration of **user intent** — particularly, how a driver's destination influences future traffic states. Without explicitly modeling where individual vehicles intend to go, many systems remain reactive, failing to anticipate future congestion that arises from users' projected paths.

Incorporating **destination-awareness** into traffic forecasting offers a more proactive paradigm. By leveraging user-declared destinations and real-time vehicle positions, systems can forecast not only localized conditions but also downstream traffic states shaped by anticipated movement.

Several studies have explored this idea, though typically in narrow or synthetic settings. Voloch and Voloch-Bloch [@voloch2021] introduced a method using GPS and destination data to forecast future traffic, achieving a 17% improvement in ETA prediction and reduced variance during congestion. DeepRoute [@deeproute2022] embedded destination signals into a sequence-to-sequence architecture for vehicle path prediction, yielding improved trajectory accuracy. Qi et al. [@qi2021destinationaware] proposed a multi-agent reinforcement learning system that incorporates destination intent in synthetic environments to better coordinate traffic flow.

Parallel to this, trajectory prediction models have begun to incorporate intent inference at the agent level. **TrafficPredict** [@trafficpredict] encodes heterogeneous traffic participants as dynamic nodes in an interaction-aware graph, reducing RMSE by 19.8% in trajectory forecasting tasks. **TrajGAT** [@trajectoryintentnet] introduces an attention-based architecture that learns to prioritize relevant historical points and interactions, improving prediction performance by more than 12% over intent-unaware models.

These works collectively highlight the value of incorporating destination intent into forecasting systems. However, they are primarily focused on predicting individual trajectories rather than system-wide traffic conditions.

Our approach extends this line of research by embedding user-declared destinations directly into a dynamic spatio-temporal graph that represents both vehicles and junctions as nodes. This enables the model to anticipate how user intentions affect not only individual paths but also aggregate traffic load, allowing for more accurate and proactive urban traffic forecasting.

## Summary and Research Gap

The rapid evolution of traffic prediction methodologies—from classical algorithms to deep learning and graph-based models—has yielded significant improvements in forecasting accuracy. However, substantial gaps remain in how these methods account for the complexity and dynamism of real-world traffic systems.

Most existing models either operate on fixed graph topologies derived from static sensor networks or focus narrowly on predicting individual trajectories. While these approaches can effectively capture historical trends and short-term fluctuations, they are not designed to anticipate how traffic evolves in response to user-specific behavior, real-time road changes, or emerging mobility patterns.

Recent research has acknowledged these limitations. For instance, the Spatial-Temporal-Decoupled Masked Pre-training method [@stdecouple] highlights challenges in learning long-term temporal trends using conventional pretraining, while the Dynamic Trend Fusion module [@trendfusion] emphasizes the need to fuse multi-scale temporal dynamics. Similarly, destination-aware models such as TrafficPredict and TrajGAT have demonstrated the benefit of integrating user intent at the agent level, yet they stop short of scaling this insight to system-wide load forecasting.

This thesis addresses these challenges by introducing a unified traffic prediction framework that models both vehicles and junctions as nodes within a dynamic spatio-temporal graph. By integrating real-time GPS data and user-declared destinations, our approach moves beyond reactive traffic estimation toward proactive, intent-informed forecasting. This enables the system not only to model current conditions but to anticipate future congestion and vehicle flow along projected travel paths—bridging the gap between individual behavior and network-level prediction.